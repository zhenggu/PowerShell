name: PR-$(System.PullRequest.PullRequestNumber)-$(Date:yyyyMMdd)$(Rev:.rr)
variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1
  # Avoid expensive initialization of dotnet cli, see: http://donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  # Enable VSTS debug mode until stabilitized
  system.debug: 'true'

resources:
- repo: self
  clean: true
phases:
- phase: Linux_CI

  queue:
    name: Hosted Linux Preview
  steps:
  - powershell:  Write-Host "##vso[build.updatebuildnumber]$env:BUILD_SOURCEBRANCHNAME-$env:BUILD_SOURCEVERSION-$((get-date).ToString("yyyyMMddhhss"))"
    displayName: Set Build Name for Non-PR
    condition: ne(variables['Build.Reason'], 'PullRequest')

# Several scripts require TMPDIR to exist
# Set it to AGENT_TEMPDIRECTORY so that we know it exists
  - powershell: |
      Write-Host "##vso[task.setvariable variable=TEMP]$env:AGENT_TEMPDIRECTORY"
    displayName: Set TEMP to AGENT_TEMPDIRECTORY
    condition: succeededOrFailed()

  - powershell: |
      git submodule update --init
    displayName: SubModule Init
    condition: succeededOrFailed()

  - powershell: |
      apt-get update
      apt-get install -y --no-install-recommends less
    displayName: Install less
    condition: succeededOrFailed()

  - powershell: |
      tools/travis.ps1 -Stage Bootstrap
    displayName: Bootstrap
    condition: succeeded()

  - powershell: |
      $ErrorActionPreference = 'continue'
      tools/travis.ps1
    displayName: Build and test
    condition: succeeded()

  - powershell: |
      tools/travis.ps1 -Stage Failure
    displayName: After Failure
    condition: failed()

  - powershell: |
      tools/travis.ps1 -Stage Success
    displayName: After Success
    condition: succeeded()

  # Uploads any packages as an artifact
  - powershell: |
      Get-ChildItem -Path *.rpm, *.deb, *.tar.gz -Recurse | Select-Object -ExpandProperty FullName | ForEach-Object {
        Write-Host "##vso[artifact.upload containerfolder=artifacts;artifactname=artifacts]$_"
      }
    displayName: Publish Artifacts
    condition: succeededOrFailed()
    continueOnError: true

  # Uploads any Test results as an artifact
  - powershell: |
      Get-ChildItem -Path Test*.xml, *XUnitTestResults.xml -Recurse | Select-Object -ExpandProperty FullName | ForEach-Object {
        Write-Host "##vso[artifact.upload containerfolder=testResults;artifactname=testResults]$_"
      }
    displayName: Publish Test Results
    condition: ne(variables['Build.Reason'], 'PullRequest')
    continueOnError: true
